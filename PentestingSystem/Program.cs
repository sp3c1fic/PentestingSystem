using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Core.Services;
using PentestingSystem.Infrastructure.Data;
using PentestingSystem.ModelBinders;
using PentestingSystem.Infrastructure.Extensions;
using PentestingSystem.Infrastructure.Data.Models;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("WindowsDefaultConnection") ??
                       throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));


builder.Services.AddDefaultIdentity<User>(options =>
    {
        options.SignIn.RequireConfirmedAccount = false;
        options.Password.RequireDigit = false;
        options.Password.RequiredLength = 16;
        options.Password.RequireLowercase = false;
        options.Password.RequireUppercase = false;
        options.Password.RequireNonAlphanumeric = false;
    })
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders()
    .AddDefaultUI();

builder.Services.AddControllersWithViews()
    .AddMvcOptions(options =>
    {
        options.ModelBinderProviders.Insert(0, new DecimalModelBinderProvider());
        options.Filters.Add<AutoValidateAntiforgeryTokenAttribute>();
    });

builder.Services.AddScoped<IVisitorService, VisitorService>();
builder.Services.AddScoped<IScanService, ScanService>();
builder.Services.AddScoped<IToolsService, ToolsService>();
builder.Services.AddScoped<ICategoryService, CategoryService>();
builder.Services.AddScoped<IWhoIsService, WhoIsService>();
builder.Services.AddScoped<IDnsRecordService, DnsRecordService>();
builder.Services.AddScoped<IMACAddressGeneratorService, MACAddressGeneratorService>();
builder.Services.AddScoped<IPasswordStrengthCheckerService, PasswordStrengthCheckerService>();
builder.Services.AddScoped<ISSLCertificateCheckService, SSLCertificateCheckService>();
builder.Services.AddScoped<ISearchContentService, SearchContentService>();
builder.Services.AddScoped<IBadRequestConfig, BadRequestConfig>();


builder.Services.AddHttpClient();

var app = builder.Build();


await app.PrepareDatabase();

if (app.Environment.IsDevelopment())
{
    
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();
app.UseAuthorization();


app.MapControllerRoute(
	name: "default",
	pattern: "{controller=Home}/{action=Index}/{id?}");

app.MapControllerRoute(
        name: "Admin",
        pattern: "{area:exists}/{controller=Admin}/{action=Index}/{id?}"
    );


app.MapRazorPages();

app.Run();