@model ToolsServiceModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Encryption</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .password-encryption-div {
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #030000;
            border-radius: 5px;
            color: whitesmoke;
            background-color: rgba(0,0,0, 0.5);
            box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }
        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        .encrypt-button {
            padding: 10px 20px;
            background-color: #007bff; /* Blue */
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .encrypt-button:hover {
            transform: scale(1.05); /* Slight scale up */
            background-color: #0056b3; /* Darker blue */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
        }
        
        .password-info {
            color: whitesmoke;
            background-color: rgba(0,0,0, 0.5);
            box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
            border: 1px solid #030000;
            border-radius: 5px;
            
        }
        
        .password-info p, .password-info h3, .password-encryption-explanation h2,
         .password-encryption-explanation h3, .password-encryption-explanation p,
         .password-encryption-explanation ol
         {
            position:relative;
            left: 15px;
        }
        
        .password-info p {
            width: 98%;
            border-radius: 5px;
        }
        
        .password-info p:hover{
            background-color: rgba(255, 255, 255, 0.17);
        }
        
        .password-encryption-explanation {
            background-color: rgba(0,0,0, 0.5);
            box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
            border: 1px solid #030000;
            border-radius: 5px;
        }
        
        
        .close-btn {
            position:relative;
            color: #f3f3f3;
            right: 10px;
        }
        
        .close-btn:hover {
            text-decoration: underline;
            color: #fd7e14;
            cursor: pointer;
        }
        
        .encrypted-heading:hover {
           text-decoration: underline;         
           color: #fd7e14;
                    
        }
    </style>
</head>
<body>
    <partial name="_ToolDescription" class="text-center"/>
    <div class="password-encryption-div mt-5">
        <h2>Password Encryption</h2>
        <form id="encryptionForm">
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="text" id="password" name="password" placeholder="Enter a string you would like to encrypt" required>
                <span class="mt-3">Enter any Password or Text to encrypt it with standard encryption algorithms. The input is taken and encrypted with each algorithm separately and shown with encryption algorithm name.</span>
            </div>
            <button class="encrypt-button" type="button" onclick="encryptPassword()">Encrypt my Password</button>
        </form>
    </div>
    
    <div id="encryptedPasswordInfo" class="password-info mt-3 d-none">
        <div class="encryption-menu-header d-flex justify-content-sm-between align-items-center">
             <h3 class="mt-2 encrypted-heading">Encrypted Password</h3>
             <span id="close-btn" class="close-btn">close X</span>
        </div>
        <hr/>
        <p><strong>Original String:</strong> <span class="text-secondary" id="originalString"></span></p>
        <p><strong>MD5 Hash:</strong> <span class="text-secondary" id="md5Hash"></span></p>
        <p><strong>SHA-1 Hash:</strong> <span class="text-secondary" id="sha1Hash"></span></p>
        <p><strong>SHA-256 Hash:</strong> <span class="text-secondary" id="sha256Hash"></span></p>
        <p><strong>SHA-384 Hash:</strong> <span class="text-secondary" id="sha384Hash"></span></p>
        <p><strong>SHA-512 Hash:</strong> <span class="text-secondary" id="sha512Hash"></span></p>
        
    </div>
    <partial name="_RelatedTools"/>
    
    <div class="password-encryption-explanation text-light mt-5">
        <h2>Password Encryption Utility Tool</h2>
        <p>The Password Encryption Utility Tool is a versatile tool designed to securely encrypt passwords using industry-standard hashing algorithms. It provides a simple and efficient way to protect sensitive information by converting plain-text passwords into irreversible hash values.</p>
        
        <h3>Features:</h3>
        <ol>
            <li>Supports multiple hashing algorithms including MD5, SHA-1, SHA-256, and SHA-512.</li>
            <li>Generates cryptographic hashes that are resistant to reverse-engineering and decryption.</li>
            <li>Securely encrypts passwords, making them suitable for storage in databases or transmission over networks.</li>
            <li>Provides a user-friendly interface for inputting passwords and selecting hashing algorithms.</li>
            <li>Offers flexible configuration options to customize the encryption process according to specific requirements.</li>
        </ol>
        
        <h3>Usage:</h3>
        <p>To encrypt a password, simply enter the desired password in the input field, select the preferred hashing algorithm, and click the "Encrypt Password" button. The tool will then generate the encrypted hash value, which can be copied and used as needed.</p>
        
        <h3>Security Considerations:</h3>
        <p>While the Password Encryption Utility Tool provides robust encryption capabilities, it's essential to follow best practices for password management and security:</p>
        <ol>
            <li>Never store plain-text passwords in databases or files.</li>
            <li>Use strong and unique passwords for each account or application.</li>
            <li>Regularly update passwords and consider implementing multi-factor authentication for added security.</li>
            <li>Protect encryption keys and ensure secure transmission of hashed passwords.</li>
        </ol>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
    <script>
            function encryptPassword() {
                const password = document.getElementById("password").value;
                
                if (isPasswordEmpty(password)){
                    alert('Password field is required');
                    return;
                }
                
                const closePasswordInfoMenuButton = document.getElementById("close-btn");
                const passwordInfoMenu = document.getElementById("encryptedPasswordInfo");
                
                let originalString = getHashFieldById("originalString");
                let md5Hash = getHashFieldById("md5Hash");
                let sha1Hash = getHashFieldById("sha1Hash");
                let sha256Hash = getHashFieldById("sha256Hash");
                let sha384Hash = getHashFieldById("sha384Hash");
                let sha512Hash = getHashFieldById("sha512Hash");
                
                originalString.textContent = password;
                md5Hash.textContent = CryptoJS.MD5(password).toString();
                sha1Hash.textContent = CryptoJS.SHA1(password).toString();
                sha256Hash.textContent = CryptoJS.SHA256(password).toString();
                sha384Hash.textContent = CryptoJS.SHA384(password).toString();
                sha512Hash.textContent = CryptoJS.SHA512(password).toString();
                
                displayEncryptionMenu(passwordInfoMenu);
                closeEncryptionMenu(passwordInfoMenu, closePasswordInfoMenuButton);
            }
            
            function displayEncryptionMenu(element){
                if (element.classList.contains("d-none")) {
                    element.classList.remove("d-none");
                }
            }
            
            function closeEncryptionMenu(element, closeBtn){
                closeBtn.addEventListener('click', function () {
                   if (!element.classList.contains("d-none")) {
                       element.classList.add("d-none");
                   } 
                });
            }
            
            function getHashFieldById(hashId){
                return document.getElementById(hashId)
            }
            
            function isPasswordEmpty(password) {
                return password === '' || 
                        password === undefined;
            }
            
        </script>
</body>
</html>
