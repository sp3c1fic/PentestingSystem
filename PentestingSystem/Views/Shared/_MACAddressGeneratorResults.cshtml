@model IEnumerable<string>

<style>
    .shadowed-div {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow effect */
    }
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .button-group {
        display: flex;
        gap: 10px; /* Adjust spacing between buttons */
    }
    
    /* Style for the buttons */
    .btn {
        padding: 5px 10px;
    }
    
    #copyButton, #downloadButton {
        font-family: Arial, Helvetica, sans-serif !important;
    }
    
</style>

<div id="macAddressesContainer" class="card mt-4 shadowed-div">

    <div class="card-header">
        <form method="post">
            <h2 class="fw-bolder text-secondary">Generated MAC Addresses</h2>
            <div class="button-group">
                <button id="copyButton" class="btn btn-outline-dark"><i class="fa fa-clipboard" aria-hidden="true"> <strong>Copy</strong></i></button>
                <a asp-controller="MACAddressGenerator" asp-action="DownloadAsJson" id="downloadButton" class="btn btn-outline-dark"><i class="fa fa-download" aria-hidden="true"> <strong>Download</strong></i></a>
            </div>
        </form>
    </div>
    <div id="loadingSpinner" style="display: none" class="text-dark mt-5">
        <i class="fa fa-spinner fa-spin"></i> Generating MACs ...
    </div>
    <div class="card-body mac-addresses-card-body">

        @if (Model.Any())
        {
            <ol class="list-group mac-addresses-list">
                @foreach (var macAddress in Model)
                {
                    <li class="list-group-item text-secondary">
                        <strong>@macAddress</strong>
                    </li>
                }
            </ol>
        }
        else
        {
            <p>No MAC addresses generated.</p>
        }
    </div>
</div>

<script>   

           function processListElements(items) {
               
               let textToCopy = {};
               let count = 1;
               
               items.forEach(i => {
                  if (!textToCopy.hasOwnProperty(count)){
                      textToCopy[count] = i.innerText;
                  }
                  count++;   
               });
               
               return textToCopy;
           }
           
           document.getElementById('copyButton').addEventListener("click", function (e) {
               e.preventDefault();
               const items = [...document.getElementsByTagName("li")]
                                .filter(i => i.classList.contains('list-group-item'));
               const obj = processListElements(items);
               const resultJson = JSON.stringify(obj, null, 2);
               
               console.log(resultJson);
               
               if (resultJson.length > 0){
                   navigator.clipboard.writeText(resultJson);
                   alert('Copied');
               }
           });

</script>

