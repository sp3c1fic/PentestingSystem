@model SSLCertificateCheckerFormServiceModel

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>SSL Certificate Checker</title>
        <style>
        
        
        .ssl-check-container { 
            text-align: center;
            background-color: rgba(0,0,0,0.5);  
            border: 1px solid black;
            height: 320px;
            box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
        }
        
        .ssl-check-container input {
            width: 65%;
            height: 50px;
            text-align: center;
        }
        
        #label-domain {
            display: block;
        
        }
        
        .check-certificate-btn {
            /* Background color */
            background-color: #23961f; /* Use your preferred color */
            display: block;
            /* Text color */
            color: #fff; /* White text color */
        
            /* Padding and spacing */
            padding: 10px 20px; /* Adjust padding as needed */
            margin: auto; /* Adjust margin as needed */
        
            /* Border and border radius */
            border: none; /* No border */
            border-radius: 5px; /* Rounded corners */
        
            /* Font styles */
            font-family: Arial, sans-serif; /* Specify preferred font */
            font-size: 16px; /* Adjust font size */
            font-weight: bold; /* Bold text */
        
            /* Hover effect */
            transition: background-color 0.3s ease; /* Smooth color transition */
        }
        
        /* Hover state */
        .check-certificate-btn:hover {
            background-color: #057902; /* Darker color on hover */
            cursor: pointer; /* Change cursor to pointer on hover */
        }
        .ssl-image-holder {
            display: flex;
            position: relative;
            width: 100%; /* Set width to 100% of its container */
            max-width: 100%; /* Ensure the div does not exceed viewport width */
            overflow: hidden; /* Hide overflow content */
        }
        .ssl-image-holder img {
           display: block;
           width: 100%;
           height: 355px;
           top: 70px;
           position: relative;
           left: 1px;
           border-radius: 10px;            
           box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Subtle box shadow */
                       
        }
        
        .inner-ssl-container h1 {
                    color: #ffcc00;
                    text-align: center;
                    margin-bottom: 20px;
        }
                .inner-ssl-container p {
                    line-height: 1.6;
                    font-size: 16px;
                }
                
                
                .highlight {
                    background-color: #ffc107;
                    padding: 5px;
                    border-radius: 3px;
                    font-weight: bold;
                }
                
        
        </style>
    </head>
<body>


<div class="ssl-image-holder">
    
    <div class="inner-ssl-container text-light">
        
        <h1>Understanding SSL Stripping</h1>
        
        <p>
        
            <span class="highlight">SSL stripping</span> is a cyber attack technique where an attacker intercepts and manipulates communication between a user and a website to downgrade a secure HTTPS connection to an unencrypted HTTP connection. This attack exploits the initial loading of websites over HTTP, followed by redirection to HTTPS for secure communication.
            </p>
            <p>
                The <span class="highlight">attack process</span> involves intercepting traffic on public Wi-Fi networks or compromised network devices. When a user tries to connect to an HTTPS website, the attacker redirects the request to an HTTP version of the site, thus downgrading the connection to an insecure protocol.
            </p>
            <p>
                By <span class="highlight">downgrading to HTTP</span>, the attacker can modify HTTPS links on web pages to point to HTTP, creating a scenario where users unknowingly transmit sensitive data over an unencrypted connection. This interception allows the attacker to view and manipulate transmitted data, including login credentials, session cookies, and other sensitive information.
            </p>
            <p>
                To prevent SSL stripping, websites should enforce HTTPS by default and implement <span class="highlight">HTTP Strict Transport Security (HSTS)</span> to ensure secure connections. Users should exercise caution when using public Wi-Fi networks and consider using VPNs or other secure connections to protect their data from interception and manipulation.
            </p>
    </div>
    <img alt="ssl" src="images/SSL-Stripping-1.png"/>
</div>
<hr />
<div class="container ssl-check-container mt-5">
    <h1 class="text-success fw-bolder">SSL Certificate Checker</h1>
    <p class="text-light">An SSL certificate checking tool is designed to inspect and validate the security credentials of SSL/TLS certificates used by websites or online services.</p>
    <form id="ssl-checker-form" method="post">
        <input asp-for="@Model.Hostname" type="text" id="domain" placeholder="Enter domain" name="domain" required class="mt-4">
        <button asp-controller="SSLCertificateChecker" asp-action="FetchCertificateInfo" id="check-certificate-btn" class="check-certificate-btn mt-4" type="submit">Check Certificate</button>
    </form>
    <div id="certificate-info">
        <!-- SSL certificate information will be displayed here -->
    </div>
</div>
@* @await Html.PartialAsync("_SSLCertificateCheck", new SSLCertificateCheckerServiceModel())  *@



@* *@
<partial name="_SSLCertificateCheck" model="new SSLCertificateCheckerServiceModel()"/>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>


function returnMatchedElements(data){
    return Array.from(data.match(/(?<=<div class="ssl-info-content">)((?:[^<]*<a [^>]*>[^<]*<\/a>[^<]*)+|[^<]+)(?=<\/div>)/g));
                    
}

function displayData(matches) {
   let sslInfoElements = Array.from(document.getElementsByClassName("ssl-info-content"));
   for (let i = 0; i < sslInfoElements.length; i++){
       
       if (matches[i].length > 1){
           sslInfoElements[i].textContent = matches[i][0] + " " + matches[i][1];           
       }
       else {
           
           sslInfoElements[i].textContent = matches[i][0];
       }
   }
}


$(document).ready(function() {
    

    $("#ssl-checker-form").submit(function (e) {
        e.preventDefault();
                             
        $.ajax({
                url: 'http://localhost:5052/SSLCertificateChecker/FetchCertificateInfo',
                type: 'POST',
                crossDomain: true, // Allow cross-origin requests
                headers: {
                    'Access-Control-Allow-Origin': '*' // Set CORS headers
                },
                data: $(this).serialize(), // Pass data to the server (replace {} with your data object)
                success: function(data) {
                    // Handle successful response
       
                    let matches = returnMatchedElements(data);
                    let matchedStrings = [];
                    
                    matches.forEach(match => {
                        match = match.split(" ").filter(x => x !== "" && x !== "\n");
                        matchedStrings.push(match);
                    });
                    displayData(matchedStrings);                 
                },
                error: function(xhr, status, error) {
                    // Handle AJAX request error
                    console.error('Ajax request failed: ', error);
                    alert("Invalid data submission");
                }    
        });
    });
    
});
</script>
</body>
</html>
