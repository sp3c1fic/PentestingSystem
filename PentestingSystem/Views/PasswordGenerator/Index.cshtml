@model ToolsServiceModel


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #0a0e10;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        .container {
            margin: 0 auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }
        .password-output {
            font-size: 20px;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #9d9898;
            color: #121415;
        }
        button {
            font-size: 16px;
            padding: 10px 20px;
            background-color: #ffffff;
            color: #0a0e10;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #121415;
            color: #f3f3f3;
        }
        
        .generator-div {
            background-color: rgba(0,0 ,0, 0.5);
            box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
            border: 1px solid black;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <partial name="_ToolDescription"/>
    <div class="container mt-5 generator-div">
        <h1 class="text-light">Generated Passwords</h1>
        <div class="password-output fw-bold" id="passwordOutput">Click 'Generate Password' to get a random password.</div>
        <button onclick="generatePassword()">Generate Password</button>
    </div>
    <partial name="_PasswordGeneratorSettings"/>
    <partial name="_RelatedTools" model="new List<ToolsServiceModel>()"/>
    <partial name="_PasswordGeneratorDescription"/>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js"></script>
    <script
        src="https://code.jquery.com/jquery-3.7.1.js"
        integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
        crossorigin="anonymous">
    </script>
    <script>
    
        
    function loadRelatedTools() {
        $.ajax({
            url: '@Url.Action("RelatedTools", "Tools")', // URL of the RelatedTools action
            type: 'GET',
            success: function(data) {
                console.log(data);
    
                const rgx = /<div\s+class="tools-links"[\s\S]*?<\/div>/g;
                const match = data.match(rgx);
                const extractedHtml = match ? match[0] : null;
    
                $('#relatedToolsContainer').html(extractedHtml); // Render related tools in the container
            },
            error: function(xhr, status, error) {
                console.error('Error loading related tools:', error);
            }
        });
    }

        function getPasswordLength(){
            return document.getElementById("passwordLength").value;
        }
        
        function getCharset(){
            
            const lowercase = "abcdefghijklmnopqrstuvwxyz";
            const uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const digits = "0123456789";
            const symbols = "!#$%^&*()_+";
            
            let charset = "";
            
            const checkboxes = Array.from(document.getElementsByClassName("check-input"));
            checkboxes.forEach(checkbox => {
                if (checkbox.checked){
                    switch (checkbox.id){
                        case "includeSymbols":
                            charset += symbols;
                            break;
                        case "includeNumbers":
                            charset += digits;
                            break;
                        case "includeLowercase":
                            charset += lowercase;
                            break;
                        case "includeUppercase":
                            charset += uppercase;
                            break;
                        default:
                            break;
                    }
                }
                
            });
            
             return charset;
            
        }
        
        function generateRandomPassword(length, charset){
                        let password = "";
            
                        for (let i = 0; i < length; i++) {
                            let randomIndex = Math.floor(Math.random() * charset.length);
                            password += charset[randomIndex];
                        }
                        
                        return password
        }
        
        function generatePassword() {
            const length = getPasswordLength();
            let charset = getCharset();
            
            console.log(typeof(length));
            
            let isLengthValidDigit = parseInt(length);
            
            if (isNaN(isLengthValidDigit)){
                alert('Length must be a valid integer.');
                return;
            }
          
            if (length > 50) {
                alert(`Password length cannot exceed 50 characters`);
                return;
            }
            
            if (charset === "") {
                charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            }
          
            document.getElementById("passwordOutput").textContent = generateRandomPassword(length, charset);
        }
        loadRelatedTools();
      
        
    </script>
</body>
</html>
