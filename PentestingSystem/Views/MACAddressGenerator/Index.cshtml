@model MACAddressGeneratorServiceModel

@{
    ViewBag.Title = "- Pentesting System - Random MAC Address Generator";
}

<style>
    .mac-address-form {
          width: 100%;
          height: 571px;
          margin: auto;
          background-color: rgba(0, 0, 0, 0.5);
          border:  1px solid black;
          border-radius: 5px;
          position: relative;
          right: 10px;
          box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
    }
    
    .container-mac-description {
        background-color: rgba(0, 0, 0, 0.5);
        border: 1px solid black;
        border-radius: 5px;
        box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.5);
    }
 
    .mac-gen-form input, .mac-gen-form select,
     .casing-div, .format-div {
        margin: auto;
    }
    .mac-gen-form select {
        cursor: pointer;
    }
   
   .limit-notification {
        display: block;
   }
   
   @@media (min-width: 120px) and (max-height: 720px) {
        .container-mac-description {
            position: relative;
            top: 140px;
            padding-bottom: 120px;;
        }
   }
   
</style>

<div class="text-light text-center mac-address-form mt-4">
    
    <h2 class="text-light text-center mt-3">Random MAC Address Generator</h2>
    <hr/>
    <p class="mac-gen-description">World's simplest online random MAC address generator for web developers and programmers. Just press the Generate MAC button, and you'll get a MAC address. Press a button â€“ get a MAC. No ads, nonsense, or garbage.</p>
    <form class="form-group mac-gen-form" method="post">
      <div class="form-group">
        <label for="macAddressPrefix">Address Prefix <span class="text-secondary">(optional)</span></label>
        <input asp-for="@Model.AddressPrefix" type="text" class="form-control w-25 h-25" id="macAddressPrefix" placeholder="Enter prefix">
        <small id="emailHelp" class="form-text text-muted">Maximum 6 character (A-F,0-9).</small>
      </div>
      <div class="form-group w-25 format-div mt-2">
          <label for="exampleFormControlSelect1">Address format</label>
          <select asp-for="AddressFormat" class="form-control" id="exampleFormControlSelect1">
              <option >00-10-FA-63-38-4A</option>
              <option >00.10.FA.63.38.4A</option>
              <option >00:10:FA:63:38:4A</option>
              <option >0010FA63384A</option>
          </select>
      </div>
      <div class="form-group w-25 h-25 text-center casing-div mt-2">
          <label for="exampleFormControlSelect1">Letter casing:</label>
          <select asp-for="@Model.LetterCasing" class="form-control" id="exampleFormControlSelect2">
              <option >Upper case</option>
              <option >Lower case</option>
          </select>
      </div>
      <div class="form-group h-25 text-center mt-2">
          <label for="macAddressPrefix">Limit</label>
          <small class="text-danger limit-notification">Max limit 50</small>
          <input asp-for="@Model.Limit" type="text" class="form-control w-25 h-25 mt-2" id="limit" placeholder="Enter limit">
          <span asp-validation-for="Limit" class="text-danger"></span>
      </div>
      <button id="generateButton" asp-controller="MACAddressGenerator" asp-action="GenerateMacAddresses" type="submit" class="btn btn-primary mt-5">Generate</button>
    </form>
</div>

<partial name="_MACAddressGeneratorResults" model="new List<string>()"/>
<partial name="_RelatedTools" model="new List<ToolsServiceModel>()"/>

<div class="container-mac-description text-light mt-4">
    <h1>Random MAC Address Generator</h1>
    <p>A random Media Access Control (MAC) address generator can be useful if you're doing cross-browser testing. For example, if you're working on a network application, then you might have an input form that accepts a MAC address. In this case, you may want to write several test cases that check that the input is valid. You can use this program to generate multiple MAC addresses and then use them in the tests. You can also modify the generated MAC addresses by removing bytes from it or adding extra bytes to create invalid test cases. This utility can also be useful for creating a new MAC address of your router or network card. Additionally, you can treat a MAC address as a random 48-bit ID as it contains 12 hex symbols (12 hex).</p>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>


    function loadRelatedTools() {
        $.ajax({
            url: '@Url.Action("RelatedTools", "Tools")', // URL of the RelatedTools action
            type: 'GET',
            success: function(data) {
                console.log(data);
    
                const rgx = /<div\s+class="tools-links"[\s\S]*?<\/div>/g;
                const match = data.match(rgx);
                const extractedHtml = match ? match[0] : null;
    
                $('#relatedToolsContainer').html(extractedHtml); // Render related tools in the container
            },
            error: function(xhr, status, error) {
                console.error('Error loading related tools:', error);
            }
        });
    }

    function hideLoadingSpinner() {
        // Hide loading spinner element (e.g., hide the spinner overlay)
        $('#loadingSpinner').hide();
    }

    function showLoadingSpinner() {
        // Display loading spinner element (e.g., show a spinner overlay)
        $('#loadingSpinner').show();
    }

    $(document).ready(function() {
        loadRelatedTools();
        $('.mac-gen-form').submit(function(e) {
            e.preventDefault();
            
            let limit = $("#limit");
            let limitAsNumber = parseInt(limit.val());
            
            if (limitAsNumber < 1 || limitAsNumber > 50){
                alert("Number of addresses to generate must be between 1 and 50");
                return;
            }
            
            $.ajax({
                url: 'http://localhost:5052/MACAddressGenerator/GenerateMacAddresses',
                observe: "response",
                headers: {
                    'Access-Control-Allow-Origin': '*'
                },
                type: 'POST',
                crossDomain: true,
                data: $(this).serialize(),
                success: function(data) {
                    hideLoadingSpinner();
                    $('#macAddressesContainer').html(data);

                    return -1;
                },
                error: function(xhr, status, error) {
                    console.error('Ajax request failed: ', error);
                    alert("Invalid data submission")
                    hideLoadingSpinner();
                }
            });
        });
        
    });

</script>