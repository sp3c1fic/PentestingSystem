using Humanizer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Core.Models.PasswordStrengthChecker;
    
namespace PentestingSystem.Controllers
{
    [Authorize]
    public class PasswordStrengthCheckerController : Controller
    {
        private readonly IPasswordStrengthCheckerService _passwordStrengthCheckerService;
        private const double attackerAttemptsPerSecond = 1e9;

        public PasswordStrengthCheckerController(IPasswordStrengthCheckerService passwordStrengthCheckerService) 
        {
            _passwordStrengthCheckerService = passwordStrengthCheckerService;
        }

		public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> CheckPasswordStrength(string password) 
        {

            if (!ModelState.IsValid) 
            {
                ModelState.AddModelError(nameof(password), "Password is not in a valid format");
                return RedirectToAction("Index", "PasswordStrengthChecker");
            }

            var passwordStrength = await _passwordStrengthCheckerService.EvaluatePasswordStrength(password);
            var timeToCrack = _passwordStrengthCheckerService.EstimateCrackingTime(password, attackerAttemptsPerSecond);


            var timeToCrackHumanized = timeToCrack.Humanize();


            var composition = _passwordStrengthCheckerService.EstimatePasswordComposition(password);

            var model = new PasswordStrengthCheckerServiceModel
            {
                Strength = passwordStrength,
                TimeToCrack = timeToCrackHumanized,
                Composition = composition
            };

            return PartialView("_PasswordStrengthCheckerResults", model);
        }

        
    }
}
