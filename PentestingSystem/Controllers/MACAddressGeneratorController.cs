using System.Text;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Core.Models.MACAddressGenerator;

namespace PentestingSystem.Controllers;

[Authorize]
public class MACAddressGeneratorController : Controller
{
    private readonly IMACAddressGeneratorService _macAddressGeneratorService;

    public MACAddressGeneratorController(IMACAddressGeneratorService macAddressGeneratorService)
    {
        _macAddressGeneratorService = macAddressGeneratorService;
    }
    public IActionResult Index()
    {
        return View();
    }
    public IActionResult GenerateMacAddresses(MACAddressGeneratorServiceModel model)
    {
        var limit = model.Limit;
        
        if (!_macAddressGeneratorService.ValidateLimit(limit))
        {
            return BadRequest("Limit must be in range between 1 and 50");
        }

        var macAddresses = new List<string>();

        for (var i = 0; i < limit; i++)
        {
            var newMac = _macAddressGeneratorService.GenerateMacAddress();
            var result = _macAddressGeneratorService.ProcessMacAddressString(model.AddressFormat);
            var separator = result.Last();
            var reformattedMac = _macAddressGeneratorService.ReformatMac(newMac, separator);
            var finalMacResult = _macAddressGeneratorService.AdjustMacAddressCasing(reformattedMac, model.LetterCasing);
            
            macAddresses.Add(finalMacResult);
        }
        
        TempData["currentMacAddresses"] = macAddresses;
        
        return PartialView("_MACAddressGeneratorResults", macAddresses);
    }

    public IActionResult DownloadAsJson()
    {
        var tempCollection = (string[])TempData["currentMacAddresses"]!;

        if (tempCollection == null)
            return BadRequest("Cannot download nothing!");

        if (tempCollection.Length == 0)
            return BadRequest("No mac addresses were generated");
        
        var macAddressesAsJson = _macAddressGeneratorService.ConvertToJson(tempCollection);
        var encoded = Encoding.UTF8.GetBytes(macAddressesAsJson);

        return File(encoded, "application/json", "addresses.json");
    }
}


