using System.Text.RegularExpressions;
using Newtonsoft.Json;
using PentestingSystem.Core.Contracts;

namespace PentestingSystem.Core.Services;

public class MACAddressGeneratorService : IMACAddressGeneratorService
{
    private readonly Random _random = new();
    private readonly Regex _rgx = new Regex("[A-Z0-9]");
    public string GenerateMacAddress()
    {
        var macBytes = new byte[6];
        
        _random.NextBytes(macBytes);

        macBytes[0] = (byte)(macBytes[0] & 0xFE);
        var macAddress = string.Join(":", macBytes.Select(b => b.ToString("X2")));

        return macAddress;
    }
    public IEnumerable<string> ProcessMacAddressString(string macAddress)
    {
        var substrings = _rgx.Split(macAddress).Distinct().ToList();
        return substrings;
    }
    public string AdjustMacAddressCasing(string macAddress, string casing)
    {
        var newMac = string.Empty;
        
        if (string.Equals(casing.ToLower(), "upper case"))
        {
            newMac = macAddress.ToUpper();
        }
        else if (string.Equals(casing.ToLower(), "lower case"))
        {
            newMac = macAddress.ToLower();
        }

        return newMac;
    }
    public string ReformatMac(string macAddress, string separator)
    {
        return Regex.Replace(macAddress, ":", separator);
    }
    public bool ValidateLimit(int limit)
    {
        return limit >= 1 & limit <= 50;
    }

    public string ConvertToJson(IEnumerable<string> macAddresses)
    {
        var json = JsonConvert.SerializeObject(macAddresses, Formatting.Indented);
        return json;
    }

    public async Task WriteAsJsonAsync(string data)
    {
        var currentDirectory = Directory.GetCurrentDirectory();
        var filePath = currentDirectory + "/" + "mac_addresses_list.json";
        
        await File.WriteAllTextAsync(filePath, data);
    }
}
