using DnsClient;
using DnsClient.Protocol;
using PentestingSystem.Core.Contracts;

namespace PentestingSystem.Core.Services;

public class DnsRecordService : IDnsRecordService
{
    public async Task<List<IEnumerable<DnsResourceRecord>>> GetDnsRecords(LookupClient lookup, string domain, string recordType)
    {
        var result = await lookup.QueryAsync(domain, GetQueryType(recordType));

        var recordsCollection = await Resolve(domain);

        return recordsCollection;

    }
    
    private async Task<List<IEnumerable<DnsResourceRecord>>> Resolve(string domain)
    {
        var lookup = new LookupClient();
        
        var aRecordResult = await lookup.QueryAsync(domain, QueryType.A);
        var nsRecordResult = await lookup.QueryAsync(domain, QueryType.NS);
        var ptrRecordResult = await lookup.QueryAsync(domain, QueryType.PTR);
        var srvRecordResult = await lookup.QueryAsync(domain, QueryType.SRV);
        var soaRecordResult = await lookup.QueryAsync(domain, QueryType.SOA);
        var caaRecordResult = await lookup.QueryAsync(domain, QueryType.CAA);
        var mxRecordResult = await lookup.QueryAsync(domain, QueryType.MX);
        var uriRecordResult = await lookup.QueryAsync(domain, QueryType.URI);


        var aRecords = aRecordResult.Answers.ARecords();
        var nsRecords = nsRecordResult.Answers.NsRecords();
        var ptrRecords = ptrRecordResult.Answers.PtrRecords();
        var srvRecords = srvRecordResult.Answers.SrvRecords();
        var soaRecords = soaRecordResult.Answers.SoaRecords();
        var caaRecords = caaRecordResult.Answers.CaaRecords();
        var mxRecords = mxRecordResult.Answers.MxRecords();
        var uriRecords = uriRecordResult.Answers.UriRecords();

        var recordsCollection = new List<IEnumerable<DnsResourceRecord>>
        {
            aRecords,
            nsRecords,
            ptrRecords,
            srvRecords,
            soaRecords,
            caaRecords,
            mxRecords,
            uriRecords
        };

        return recordsCollection;
    }

    private static QueryType GetQueryType(string recordType)
    {
        return recordType.ToUpper() switch
        {
            "A" => QueryType.A,
            "TXT" => QueryType.TXT,
            "SOA" => QueryType.SOA,
            "PTR" => QueryType.PTR,
            "MX" => QueryType.MX,
            "CAA" => QueryType.CAA,
            "AAAA" => QueryType.AAAA,
            "NS" => QueryType.NS,
            "CNAME" => QueryType.CNAME,
            _ => throw new ArgumentException($"Unsupported DNS record type: {recordType}")
        };
    }

} 