using System.Text.RegularExpressions;
using DnsClient;
using DnsClient.Protocol;
using Microsoft.AspNetCore.Connections;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Infrastructure.Data;

namespace PentestingSystem.Core.Services;

public class DnsRecordService : IDnsRecordService
{
    private readonly ApplicationDbContext _context;

    public DnsRecordService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<DnsResourceRecord>> GetDnsRecords(LookupClient lookup, string domain,
        string recordType, string dnsServer)
    {

        try
        {
            if (recordType == null)
            {
                return null;
            }

            return await Resolve(domain, recordType);;

        }
        catch
        {
            throw new ConnectionAbortedException("Connection could not be established.");
        }
    }

    public async Task<ICollection<string>> GetDnsRecordTypes()
    {
        if (!_context.DnsRecords.Any())
        {
            throw new InvalidOperationException("No dns records present in the database");
        }

        var dnsRecords = await _context.DnsRecords
            .Select(d => d.Type)
            .ToListAsync();

        return dnsRecords;
    }

    private static async Task<IEnumerable<DnsResourceRecord>> Resolve(string domain, string recordType)
    {
        var lookup = new LookupClient();

        var txtRecordResult = await lookup.QueryAsync(domain, QueryType.TXT);
        var cnameRecordResult = await lookup.QueryAsync(domain, QueryType.CNAME);
        var aRecordResult = await lookup.QueryAsync(domain, QueryType.A);
        var nsRecordResult = await lookup.QueryAsync(domain, QueryType.NS);
        var ptrRecordResult = await lookup.QueryAsync(domain, QueryType.PTR);
        var srvRecordResult = await lookup.QueryAsync(domain, QueryType.SRV);
        var soaRecordResult = await lookup.QueryAsync(domain, QueryType.SOA);
        var caaRecordResult = await lookup.QueryAsync(domain, QueryType.CAA);
        var mxRecordResult = await lookup.QueryAsync(domain, QueryType.MX);
        var uriRecordResult = await lookup.QueryAsync(domain, QueryType.URI);
        var aaaaRecordResult = await lookup.QueryAsync(domain, QueryType.AAAA);

        var txtRecords = txtRecordResult.Answers.TxtRecords();
        var cnameRecords = cnameRecordResult.Answers.CnameRecords();
        var aRecords = aRecordResult.Answers.ARecords();
        var nsRecords = nsRecordResult.Answers.NsRecords();
        var ptrRecords = ptrRecordResult.Answers.PtrRecords();
        var srvRecords = srvRecordResult.Answers.SrvRecords();
        var soaRecords = soaRecordResult.Answers.SoaRecords();
        var caaRecords = caaRecordResult.Answers.CaaRecords();
        var mxRecords = mxRecordResult.Answers.MxRecords();
        var uriRecords = uriRecordResult.Answers.UriRecords();
        var aaaaRecords = aaaaRecordResult.Answers.AaaaRecords();

        var recordsBook = new Dictionary<string, IEnumerable<DnsResourceRecord>>
        {
            { "CNAME", cnameRecords },
            { "PTR", ptrRecords },
            { "MX", mxRecords },
            { "SRV", srvRecords },
            { "TXT", txtRecords },
            { "CAA", caaRecords },
            { "SOA", soaRecords },
            {"NS", nsRecords}

        };


        // var recordsCollections = new List<IEnumerable<DnsResourceRecord>>
        // {
        //     cnameRecords,
        //     aRecords,
        //     nsRecords,
        //     ptrRecords,
        //     srvRecords,
        //     soaRecords,
        //     caaRecords,
        //     mxRecords,
        //     uriRecords,
        //     aaaaRecords
        // };
        //

        
        return recordsBook[recordType];
    }
    
    
    
    
    
    private static QueryType GetQueryType(string recordType)
    {
        return recordType.ToUpper() switch
        {
            "A" => QueryType.A,
            "TXT" => QueryType.TXT,
            "SOA" => QueryType.SOA,
            "PTR" => QueryType.PTR,
            "MX" => QueryType.MX,
            "CAA" => QueryType.CAA,
            "AAAA" => QueryType.AAAA,
            "NS" => QueryType.NS,
            "CNAME" => QueryType.CNAME,
            _ => throw new ArgumentException($"Unsupported DNS record type: {recordType}")
        };
    }
} 