using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.EntityFrameworkCore;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Infrastructure.Data;
using PentestingSystem.Models.Scans;

namespace PentestingSystem.Core.Services;

public class ScanService : IScanService
{
    private readonly ApplicationDbContext _data;

    public ScanService(ApplicationDbContext data)
    {
        _data = data;
    }
    public async Task<string> ParseArgs(string commandId)
    {
        var command = await _data.Commands.FirstOrDefaultAsync(c => c.Id == commandId); // service not here
        var commandName = command?.Name.Split();
        var elToRemove = commandName?[0];
        var arr = commandName?.Where(val => val != elToRemove).ToArray();
        var arg = string.Join(' ', arr!);

        return arg;
    }

    public ProcessStartInfo CreateProcessStartInfo(string arg, string target)
    {
        var startInfo = new ProcessStartInfo
        {
            FileName = GetFileName(),
            Arguments = $"{arg} {target}",
            UseShellExecute = false,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            CreateNoWindow = true,
            Verb = "runas"
        };

        return startInfo;
    }

    private void AddScan()
    {
        
    }

    public async Task<ICollection<ScanCommandModel>> GetScanCommands()
        => await _data
            .Commands
            .Select(s => new ScanCommandModel()
            {
                Id = s.Id,
                Name = s.Name,
                Description = s.Description,
            })
            .ToListAsync();
    
    private static string GetFileName()
    {
        var fileName = string.Empty;

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            fileName = @"C:\Users\stjimmyyy\games\Nmap\nmap.exe";
        }
        else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
        {
            fileName = "/usr/bin/nmap";
        }

        return fileName;
    }
    
    
}   
