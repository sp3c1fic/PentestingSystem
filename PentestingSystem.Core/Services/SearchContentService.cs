using Microsoft.EntityFrameworkCore;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Core.Models.Tools;
using PentestingSystem.Infrastructure.Data;
using PentestingSystem.Models;

namespace PentestingSystem.Core.Services;

public class SearchContentService : ISearchContentService
{
    private readonly ApplicationDbContext _context;

    public SearchContentService(ApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<List<CategoryServiceModel>> FetchContent(string searchPattern)
    {
        var categoriesTools = await _context.Categories
            .Select(c => new CategoryServiceModel
            {
                Name = c.Name,
                Description = c.Description,
                Tools = c.Tools.Where(t => t.Name.ToLower().Contains(searchPattern) ||
                                           t.ShortDescription.ToLower().Contains(searchPattern) ||
                                           t.Category.Name.ToLower().Contains(searchPattern))
                    .Select(t => new ToolsServiceModel
                    {
                        Name = t.Name,
                        IconPath = t.IconPath,
                        ShortDescription = t.ShortDescription,
                        ControllerName = t.Name
                    })
                    .Distinct()
                    .ToList()
            })
            .ToListAsync();

        categoriesTools = FilterFetchedContent(categoriesTools);
        
        return categoriesTools;
    }


    private List<CategoryServiceModel> FilterFetchedContent(List<CategoryServiceModel> categoriesTools)
    {
        return categoriesTools.Where(c => c.Tools.Count > 0)
            .Select(c => c)
            .ToList();

    }
}