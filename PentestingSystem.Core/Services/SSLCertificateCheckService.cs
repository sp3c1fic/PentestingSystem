using System.Globalization;
using PentestingSystem.Core.Contracts;
using PentestingSystem.Infrastructure.Extensions;
using PentestingSystem.Models.SSLCertificateChecker;

namespace PentestingSystem.Core.Services;

public class SSLCertificateCheckService : ISSLCertificateCheckService
{
    public async Task<SSLCertificateCheckerServiceModel> FetchCertificate(string domain)
    {
        var certificate = await CertificateDownloader.GetCertificateAsync(domain);

        if (certificate == null)
            throw new InvalidOperationException("Certificate cannot be null");

        var certificateValidity = certificate.NotAfter - certificate.NotBefore;

        var model = new SSLCertificateCheckerServiceModel
        {
            Host = domain,
            Url = domain,
            IssuedFor = domain,
            Version = certificate.Version,
            Subject = certificate.Subject,
            Issuer = certificate.Issuer,
            Validity = certificateValidity.Days,
            SerialNumber = certificate.SerialNumber,
            NotBefore = certificate.NotBefore.ToString(CultureInfo.InvariantCulture),
            NotAfter = certificate.NotAfter.ToString(CultureInfo.InvariantCulture),
            Algorithm = certificate.SignatureAlgorithm.FriendlyName!,
            Status = GetSslCertificateStatus(certificate.NotBefore, certificate.NotAfter)
                
        };
            

        return model;
    }

    private static string GetSslCertificateStatus(DateTime dateFrom, DateTime dateTo)
    {
        var comparison = DateTime.Compare(dateFrom, dateTo);
        return comparison is < 0 or 0 ? "Valid" : "Invalid";
    }

}