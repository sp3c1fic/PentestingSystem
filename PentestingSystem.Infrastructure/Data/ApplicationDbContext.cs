using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using PentestingSystem.Infrastructure.Data.Models;

namespace PentestingSystem.Infrastructure.Data;


// TODO CREATE SEPARATE EXTENSION METHODS TO SEED THE DATABASE

public class ApplicationDbContext : IdentityDbContext
{
    
     public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
    
    private Command AggressiveScan { get; set; }
    private Command OSScan { get; set; }
    private Command CustomScan { get; set; }
    private Command RangeScan { get; set; }
    private Command TCPScan { get; set; }
    private Command DecoyScan { get; set; }
    private Command VersionDetection { get; set; }
    private Command UdpScan { get; set; }
    private Command ConnectScan { get; set; }
    private Command TopTenPorts { get; set; }
    
    public DbSet<Scan> Scans { get; init; }
    public DbSet<Command> Commands { get; init; }
    public DbSet<Tool> Tools { get; init; }
    public DbSet<Category> Categories { get; init; }
    protected override void OnModelCreating(ModelBuilder builder)
    {   
        SeedScans();
        
        builder  
            .Entity<Category>()
            .HasMany(c => c.Tools)
            .WithOne(t => t.Category)
            .HasForeignKey(t => t.CategoryId)
            .OnDelete(DeleteBehavior.Cascade);
        
        base.OnModelCreating(builder);

    }
  
    private void SeedScans()
    {
        OSScan = new Command
        {
            Name = "nmap -O",
            Description = "Attempts to discover what OS the host is running",
        };

        AggressiveScan = new Command
        {
            Name = "nmap -A",
            Description = "Scans the host in an aggressive manner. Hence the name aggressive scan"
        };

        CustomScan = new Command
        {
            Name = "nmap -sC -sV -A -p- -Pn --script=http-enum",
            Description = "Custom scan"
        };

        TCPScan = new Command
        {
            Name = "nmap -sT",
            Description = "Basic TCP scan"
        };

        RangeScan = new Command
        {
            Name = "nmap -sn -oA",
            Description = "Scanning a range of networks with this method only works if the firewalls in place allow it."
        };

        TopTenPorts = new Command
        {
            Name = "sudo nmap --top-ports=10",
            Description = "Scans the top ten ports"
        };

        ConnectScan = new Command
        {
            Name = "nmap --packet-trace --disable-arp-ping -Pn -n --reason -sT",
            Description =
                "The Nmap TCP Connect Scan (-sT) uses the TCP three-way handshake to determine if a specific port on a target host is open or closed."
        };

        UdpScan = new Command
        {
            Name = "nmap -F -sU",
            Description =
                "Some system administrators sometimes forget to filter the UDP ports in addition to the TCP ones."
        };

        VersionDetection = new Command
        {
            Name = "sudo nmap -p- -sV",
            Description =
                "A quick port scan with show us a small overview of the available ports and what versions they are."
        };

        DecoyScan = new Command
        {
            Name = "nmap -sS -p- -Pn -n --disable-arp-ping --packet-trace -D RND:5",
            Description = "If we detect that IDS/IPS exists, then the decoy scanning method (-D) is the right choice."
        };
    }
}